import os
import argparse
from dotenv import load_dotenv

from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.agents import initialize_agent, AgentType
from langchain_community.agent_toolkits.load_tools import load_tools


def build_agent(
    model_name: str = "gemini-2.0-flash",
    *,
    temperature: float = 0.0,
    verbose: bool = True,
):
    """Return a LangChain agent wired with Wikipedia + Calculator tools."""
    # Load environment variables from .env file
    load_dotenv()

    if not os.environ.get("GOOGLE_API_KEY"):
        raise EnvironmentError("GOOGLE_API_KEY environment variable is not set.")

    # LLM that powers the agent's reasoning
    llm = ChatGoogleGenerativeAI(model=model_name, temperature=temperature)

    # Two built‑in tools: Wikipedia search and an LLM‑backed math calculator
    tools = load_tools(["wikipedia", "llm-math"], llm=llm)

    # Build the agent (zero‑shot ReAct) and return it
    agent = initialize_agent(
        tools=tools,
        llm=llm,
        agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
        verbose=verbose,
        handle_parsing_errors=True,
    )
    return agent


def main() -> None:
    parser = argparse.ArgumentParser(description="LLM Agent hands-on demo.")
    parser.add_argument(
        "--model", default="gemini-2.0-flash", help="Google Generative AI model to use"
    )
    args = parser.parse_args()

    agent = build_agent(model_name=args.model)

    print(">>> LangChain Agent demo. Type 'exit' to quit.")
    while True:
        try:
            user_input = input("\nUser> ")
        except (EOFError, KeyboardInterrupt):
            print()  # newline on Ctrl‑C / Ctrl‑D
            break
        if user_input.strip().lower() in {"exit", "quit", "q"}:
            break

        try:
            response = agent.run(user_input)
        except Exception as err:
            print(f"[⚠️] Agent error: {err}")
            continue

        print(f"Agent> {response}")


if __name__ == "__main__":
    main()
